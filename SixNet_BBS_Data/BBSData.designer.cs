#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SixNet_BBS_Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SixNet_BBS")]
	public partial class BBSDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccessGroup(AccessGroup instance);
    partial void UpdateAccessGroup(AccessGroup instance);
    partial void DeleteAccessGroup(AccessGroup instance);
    partial void InsertUserUDBase(UserUDBase instance);
    partial void UpdateUserUDBase(UserUDBase instance);
    partial void DeleteUserUDBase(UserUDBase instance);
    partial void InsertBBSConfig(BBSConfig instance);
    partial void UpdateBBSConfig(BBSConfig instance);
    partial void DeleteBBSConfig(BBSConfig instance);
    partial void InsertCallLog(CallLog instance);
    partial void UpdateCallLog(CallLog instance);
    partial void DeleteCallLog(CallLog instance);
    partial void InsertFeedback(Feedback instance);
    partial void UpdateFeedback(Feedback instance);
    partial void DeleteFeedback(Feedback instance);
    partial void InsertFileDetail(FileDetail instance);
    partial void UpdateFileDetail(FileDetail instance);
    partial void DeleteFileDetail(FileDetail instance);
    partial void InsertGFileArea(GFileArea instance);
    partial void UpdateGFileArea(GFileArea instance);
    partial void DeleteGFileArea(GFileArea instance);
    partial void InsertGFileDetail(GFileDetail instance);
    partial void UpdateGFileDetail(GFileDetail instance);
    partial void DeleteGFileDetail(GFileDetail instance);
    partial void InsertGraffiti(Graffiti instance);
    partial void UpdateGraffiti(Graffiti instance);
    partial void DeleteGraffiti(Graffiti instance);
    partial void InsertMessageBaseArea(MessageBaseArea instance);
    partial void UpdateMessageBaseArea(MessageBaseArea instance);
    partial void DeleteMessageBaseArea(MessageBaseArea instance);
    partial void InsertMessageBase(MessageBase instance);
    partial void UpdateMessageBase(MessageBase instance);
    partial void DeleteMessageBase(MessageBase instance);
    partial void InsertMessageBody(MessageBody instance);
    partial void UpdateMessageBody(MessageBody instance);
    partial void DeleteMessageBody(MessageBody instance);
    partial void InsertMessageHeader(MessageHeader instance);
    partial void UpdateMessageHeader(MessageHeader instance);
    partial void DeleteMessageHeader(MessageHeader instance);
    partial void InsertMessageThread(MessageThread instance);
    partial void UpdateMessageThread(MessageThread instance);
    partial void DeleteMessageThread(MessageThread instance);
    partial void InsertNews_Item(News_Item instance);
    partial void UpdateNews_Item(News_Item instance);
    partial void DeleteNews_Item(News_Item instance);
    partial void InsertPFileArea(PFileArea instance);
    partial void UpdatePFileArea(PFileArea instance);
    partial void DeletePFileArea(PFileArea instance);
    partial void InsertPFileDetail(PFileDetail instance);
    partial void UpdatePFileDetail(PFileDetail instance);
    partial void DeletePFileDetail(PFileDetail instance);
    partial void InsertSysConfig(SysConfig instance);
    partial void UpdateSysConfig(SysConfig instance);
    partial void DeleteSysConfig(SysConfig instance);
    partial void InsertUDBaseArea(UDBaseArea instance);
    partial void UpdateUDBaseArea(UDBaseArea instance);
    partial void DeleteUDBaseArea(UDBaseArea instance);
    partial void InsertUDBase(UDBase instance);
    partial void UpdateUDBase(UDBase instance);
    partial void DeleteUDBase(UDBase instance);
    partial void InsertUDFile(UDFile instance);
    partial void UpdateUDFile(UDFile instance);
    partial void DeleteUDFile(UDFile instance);
    partial void InsertUserDefinedField(UserDefinedField instance);
    partial void UpdateUserDefinedField(UserDefinedField instance);
    partial void DeleteUserDefinedField(UserDefinedField instance);
    partial void InsertUserMessageBase(UserMessageBase instance);
    partial void UpdateUserMessageBase(UserMessageBase instance);
    partial void DeleteUserMessageBase(UserMessageBase instance);
    partial void InsertUserRead(UserRead instance);
    partial void UpdateUserRead(UserRead instance);
    partial void DeleteUserRead(UserRead instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public BBSDataDataContext() : 
				base("Insert Connection String Here", mappingSource)
		{
			OnCreated();
		}
		
		public BBSDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BBSDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BBSDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BBSDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AccessGroup> AccessGroups
		{
			get
			{
				return this.GetTable<AccessGroup>();
			}
		}
		
		public System.Data.Linq.Table<UserUDBase> UserUDBases
		{
			get
			{
				return this.GetTable<UserUDBase>();
			}
		}
		
		public System.Data.Linq.Table<BBSConfig> BBSConfigs
		{
			get
			{
				return this.GetTable<BBSConfig>();
			}
		}
		
		public System.Data.Linq.Table<CallLog> CallLogs
		{
			get
			{
				return this.GetTable<CallLog>();
			}
		}
		
		public System.Data.Linq.Table<Feedback> Feedbacks
		{
			get
			{
				return this.GetTable<Feedback>();
			}
		}
		
		public System.Data.Linq.Table<FileDetail> FileDetails
		{
			get
			{
				return this.GetTable<FileDetail>();
			}
		}
		
		public System.Data.Linq.Table<GFileArea> GFileAreas
		{
			get
			{
				return this.GetTable<GFileArea>();
			}
		}
		
		public System.Data.Linq.Table<GFileDetail> GFileDetails
		{
			get
			{
				return this.GetTable<GFileDetail>();
			}
		}
		
		public System.Data.Linq.Table<Graffiti> Graffitis
		{
			get
			{
				return this.GetTable<Graffiti>();
			}
		}
		
		public System.Data.Linq.Table<MessageBaseArea> MessageBaseAreas
		{
			get
			{
				return this.GetTable<MessageBaseArea>();
			}
		}
		
		public System.Data.Linq.Table<MessageBase> MessageBases
		{
			get
			{
				return this.GetTable<MessageBase>();
			}
		}
		
		public System.Data.Linq.Table<MessageBody> MessageBodies
		{
			get
			{
				return this.GetTable<MessageBody>();
			}
		}
		
		public System.Data.Linq.Table<MessageHeader> MessageHeaders
		{
			get
			{
				return this.GetTable<MessageHeader>();
			}
		}
		
		public System.Data.Linq.Table<MessageThread> MessageThreads
		{
			get
			{
				return this.GetTable<MessageThread>();
			}
		}
		
		public System.Data.Linq.Table<News_Item> News_Items
		{
			get
			{
				return this.GetTable<News_Item>();
			}
		}
		
		public System.Data.Linq.Table<PFileArea> PFileAreas
		{
			get
			{
				return this.GetTable<PFileArea>();
			}
		}
		
		public System.Data.Linq.Table<PFileDetail> PFileDetails
		{
			get
			{
				return this.GetTable<PFileDetail>();
			}
		}
		
		public System.Data.Linq.Table<SysConfig> SysConfigs
		{
			get
			{
				return this.GetTable<SysConfig>();
			}
		}
		
		public System.Data.Linq.Table<UDBaseArea> UDBaseAreas
		{
			get
			{
				return this.GetTable<UDBaseArea>();
			}
		}
		
		public System.Data.Linq.Table<UDBase> UDBases
		{
			get
			{
				return this.GetTable<UDBase>();
			}
		}
		
		public System.Data.Linq.Table<UDFile> UDFiles
		{
			get
			{
				return this.GetTable<UDFile>();
			}
		}
		
		public System.Data.Linq.Table<UserDefinedField> UserDefinedFields
		{
			get
			{
				return this.GetTable<UserDefinedField>();
			}
		}
		
		public System.Data.Linq.Table<UserMessageBase> UserMessageBases
		{
			get
			{
				return this.GetTable<UserMessageBase>();
			}
		}
		
		public System.Data.Linq.Table<UserRead> UserReads
		{
			get
			{
				return this.GetTable<UserRead>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccessGroups")]
	public partial class AccessGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccessGroupId;
		
		private int _AccessGroupNumber;
		
		private string _Title;
		
		private string _Description;
		
		private int _CallsPerDay;
		
		private int _MinutesPerCall;
		
		private bool _Flag_Remote_Maintenance;
		
		private bool _Is_SysOp;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccessGroupIdChanging(int value);
    partial void OnAccessGroupIdChanged();
    partial void OnAccessGroupNumberChanging(int value);
    partial void OnAccessGroupNumberChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCallsPerDayChanging(int value);
    partial void OnCallsPerDayChanged();
    partial void OnMinutesPerCallChanging(int value);
    partial void OnMinutesPerCallChanged();
    partial void OnFlag_Remote_MaintenanceChanging(bool value);
    partial void OnFlag_Remote_MaintenanceChanged();
    partial void OnIs_SysOpChanging(bool value);
    partial void OnIs_SysOpChanged();
    #endregion
		
		public AccessGroup()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessGroupId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AccessGroupId
		{
			get
			{
				return this._AccessGroupId;
			}
			set
			{
				if ((this._AccessGroupId != value))
				{
					this.OnAccessGroupIdChanging(value);
					this.SendPropertyChanging();
					this._AccessGroupId = value;
					this.SendPropertyChanged("AccessGroupId");
					this.OnAccessGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessGroupNumber", DbType="Int NOT NULL")]
		public int AccessGroupNumber
		{
			get
			{
				return this._AccessGroupNumber;
			}
			set
			{
				if ((this._AccessGroupNumber != value))
				{
					this.OnAccessGroupNumberChanging(value);
					this.SendPropertyChanging();
					this._AccessGroupNumber = value;
					this.SendPropertyChanged("AccessGroupNumber");
					this.OnAccessGroupNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(4000)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(4000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CallsPerDay", DbType="Int NOT NULL")]
		public int CallsPerDay
		{
			get
			{
				return this._CallsPerDay;
			}
			set
			{
				if ((this._CallsPerDay != value))
				{
					this.OnCallsPerDayChanging(value);
					this.SendPropertyChanging();
					this._CallsPerDay = value;
					this.SendPropertyChanged("CallsPerDay");
					this.OnCallsPerDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinutesPerCall", DbType="Int NOT NULL")]
		public int MinutesPerCall
		{
			get
			{
				return this._MinutesPerCall;
			}
			set
			{
				if ((this._MinutesPerCall != value))
				{
					this.OnMinutesPerCallChanging(value);
					this.SendPropertyChanging();
					this._MinutesPerCall = value;
					this.SendPropertyChanged("MinutesPerCall");
					this.OnMinutesPerCallChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Flag_Remote_Maintenance", DbType="Bit NOT NULL")]
		public bool Flag_Remote_Maintenance
		{
			get
			{
				return this._Flag_Remote_Maintenance;
			}
			set
			{
				if ((this._Flag_Remote_Maintenance != value))
				{
					this.OnFlag_Remote_MaintenanceChanging(value);
					this.SendPropertyChanging();
					this._Flag_Remote_Maintenance = value;
					this.SendPropertyChanged("Flag_Remote_Maintenance");
					this.OnFlag_Remote_MaintenanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Is_SysOp", DbType="Bit NOT NULL")]
		public bool Is_SysOp
		{
			get
			{
				return this._Is_SysOp;
			}
			set
			{
				if ((this._Is_SysOp != value))
				{
					this.OnIs_SysOpChanging(value);
					this.SendPropertyChanging();
					this._Is_SysOp = value;
					this.SendPropertyChanged("Is_SysOp");
					this.OnIs_SysOpChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserUDBases")]
	public partial class UserUDBase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserUDBaseId;
		
		private int _UserId;
		
		private int _UDBaseId;
		
		private System.DateTime _LastVisit;
		
		private EntityRef<UDBase> _UDBase;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserUDBaseIdChanging(int value);
    partial void OnUserUDBaseIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUDBaseIdChanging(int value);
    partial void OnUDBaseIdChanged();
    partial void OnLastVisitChanging(System.DateTime value);
    partial void OnLastVisitChanged();
    #endregion
		
		public UserUDBase()
		{
			this._UDBase = default(EntityRef<UDBase>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUDBaseId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserUDBaseId
		{
			get
			{
				return this._UserUDBaseId;
			}
			set
			{
				if ((this._UserUDBaseId != value))
				{
					this.OnUserUDBaseIdChanging(value);
					this.SendPropertyChanging();
					this._UserUDBaseId = value;
					this.SendPropertyChanged("UserUDBaseId");
					this.OnUserUDBaseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UDBaseId", DbType="Int NOT NULL")]
		public int UDBaseId
		{
			get
			{
				return this._UDBaseId;
			}
			set
			{
				if ((this._UDBaseId != value))
				{
					if (this._UDBase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUDBaseIdChanging(value);
					this.SendPropertyChanging();
					this._UDBaseId = value;
					this.SendPropertyChanged("UDBaseId");
					this.OnUDBaseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastVisit", DbType="DateTime NOT NULL")]
		public System.DateTime LastVisit
		{
			get
			{
				return this._LastVisit;
			}
			set
			{
				if ((this._LastVisit != value))
				{
					this.OnLastVisitChanging(value);
					this.SendPropertyChanging();
					this._LastVisit = value;
					this.SendPropertyChanged("LastVisit");
					this.OnLastVisitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UDBase_UserUDBase", Storage="_UDBase", ThisKey="UDBaseId", OtherKey="UDBaseId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UDBase UDBase
		{
			get
			{
				return this._UDBase.Entity;
			}
			set
			{
				UDBase previousValue = this._UDBase.Entity;
				if (((previousValue != value) 
							|| (this._UDBase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UDBase.Entity = null;
						previousValue.UserUDBases.Remove(this);
					}
					this._UDBase.Entity = value;
					if ((value != null))
					{
						value.UserUDBases.Add(this);
						this._UDBaseId = value.UDBaseId;
					}
					else
					{
						this._UDBaseId = default(int);
					}
					this.SendPropertyChanged("UDBase");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserUDBase", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserUDBases.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserUDBases.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BBSConfigs")]
	public partial class BBSConfig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BBSConfigId;
		
		private int _SysOpUserId;
		
		private string _BBS_Name;
		
		private string _BBS_URL;
		
		private int _BBS_Port;
		
		private string _SysOp_Handle;
		
		private string _SysOp_Email;
		
		private string _SysopMenuPass;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBBSConfigIdChanging(int value);
    partial void OnBBSConfigIdChanged();
    partial void OnSysOpUserIdChanging(int value);
    partial void OnSysOpUserIdChanged();
    partial void OnBBS_NameChanging(string value);
    partial void OnBBS_NameChanged();
    partial void OnBBS_URLChanging(string value);
    partial void OnBBS_URLChanged();
    partial void OnBBS_PortChanging(int value);
    partial void OnBBS_PortChanged();
    partial void OnSysOp_HandleChanging(string value);
    partial void OnSysOp_HandleChanged();
    partial void OnSysOp_EmailChanging(string value);
    partial void OnSysOp_EmailChanged();
    partial void OnSysopMenuPassChanging(string value);
    partial void OnSysopMenuPassChanged();
    #endregion
		
		public BBSConfig()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BBSConfigId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BBSConfigId
		{
			get
			{
				return this._BBSConfigId;
			}
			set
			{
				if ((this._BBSConfigId != value))
				{
					this.OnBBSConfigIdChanging(value);
					this.SendPropertyChanging();
					this._BBSConfigId = value;
					this.SendPropertyChanged("BBSConfigId");
					this.OnBBSConfigIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SysOpUserId", DbType="Int NOT NULL")]
		public int SysOpUserId
		{
			get
			{
				return this._SysOpUserId;
			}
			set
			{
				if ((this._SysOpUserId != value))
				{
					this.OnSysOpUserIdChanging(value);
					this.SendPropertyChanging();
					this._SysOpUserId = value;
					this.SendPropertyChanged("SysOpUserId");
					this.OnSysOpUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BBS_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string BBS_Name
		{
			get
			{
				return this._BBS_Name;
			}
			set
			{
				if ((this._BBS_Name != value))
				{
					this.OnBBS_NameChanging(value);
					this.SendPropertyChanging();
					this._BBS_Name = value;
					this.SendPropertyChanged("BBS_Name");
					this.OnBBS_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BBS_URL", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string BBS_URL
		{
			get
			{
				return this._BBS_URL;
			}
			set
			{
				if ((this._BBS_URL != value))
				{
					this.OnBBS_URLChanging(value);
					this.SendPropertyChanging();
					this._BBS_URL = value;
					this.SendPropertyChanged("BBS_URL");
					this.OnBBS_URLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BBS_Port", DbType="Int NOT NULL")]
		public int BBS_Port
		{
			get
			{
				return this._BBS_Port;
			}
			set
			{
				if ((this._BBS_Port != value))
				{
					this.OnBBS_PortChanging(value);
					this.SendPropertyChanging();
					this._BBS_Port = value;
					this.SendPropertyChanged("BBS_Port");
					this.OnBBS_PortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SysOp_Handle", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string SysOp_Handle
		{
			get
			{
				return this._SysOp_Handle;
			}
			set
			{
				if ((this._SysOp_Handle != value))
				{
					this.OnSysOp_HandleChanging(value);
					this.SendPropertyChanging();
					this._SysOp_Handle = value;
					this.SendPropertyChanged("SysOp_Handle");
					this.OnSysOp_HandleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SysOp_Email", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string SysOp_Email
		{
			get
			{
				return this._SysOp_Email;
			}
			set
			{
				if ((this._SysOp_Email != value))
				{
					this.OnSysOp_EmailChanging(value);
					this.SendPropertyChanging();
					this._SysOp_Email = value;
					this.SendPropertyChanged("SysOp_Email");
					this.OnSysOp_EmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SysopMenuPass", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string SysopMenuPass
		{
			get
			{
				return this._SysopMenuPass;
			}
			set
			{
				if ((this._SysopMenuPass != value))
				{
					this.OnSysopMenuPassChanging(value);
					this.SendPropertyChanging();
					this._SysopMenuPass = value;
					this.SendPropertyChanged("SysopMenuPass");
					this.OnSysopMenuPassChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CallLogs")]
	public partial class CallLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CallLogId;
		
		private int _UserId;
		
		private System.DateTime _Connected;
		
		private System.DateTime _Disconnected;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCallLogIdChanging(int value);
    partial void OnCallLogIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnConnectedChanging(System.DateTime value);
    partial void OnConnectedChanged();
    partial void OnDisconnectedChanging(System.DateTime value);
    partial void OnDisconnectedChanged();
    #endregion
		
		public CallLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CallLogId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CallLogId
		{
			get
			{
				return this._CallLogId;
			}
			set
			{
				if ((this._CallLogId != value))
				{
					this.OnCallLogIdChanging(value);
					this.SendPropertyChanging();
					this._CallLogId = value;
					this.SendPropertyChanged("CallLogId");
					this.OnCallLogIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Connected", DbType="DateTime NOT NULL")]
		public System.DateTime Connected
		{
			get
			{
				return this._Connected;
			}
			set
			{
				if ((this._Connected != value))
				{
					this.OnConnectedChanging(value);
					this.SendPropertyChanging();
					this._Connected = value;
					this.SendPropertyChanged("Connected");
					this.OnConnectedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Disconnected", DbType="DateTime NOT NULL")]
		public System.DateTime Disconnected
		{
			get
			{
				return this._Disconnected;
			}
			set
			{
				if ((this._Disconnected != value))
				{
					this.OnDisconnectedChanging(value);
					this.SendPropertyChanging();
					this._Disconnected = value;
					this.SendPropertyChanged("Disconnected");
					this.OnDisconnectedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Feedbacks")]
	public partial class Feedback : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FeedbackId;
		
		private string _Subject;
		
		private string _Body;
		
		private int _FromUser;
		
		private System.DateTime _Sent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFeedbackIdChanging(int value);
    partial void OnFeedbackIdChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnFromUserChanging(int value);
    partial void OnFromUserChanged();
    partial void OnSentChanging(System.DateTime value);
    partial void OnSentChanged();
    #endregion
		
		public Feedback()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeedbackId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FeedbackId
		{
			get
			{
				return this._FeedbackId;
			}
			set
			{
				if ((this._FeedbackId != value))
				{
					this.OnFeedbackIdChanging(value);
					this.SendPropertyChanging();
					this._FeedbackId = value;
					this.SendPropertyChanged("FeedbackId");
					this.OnFeedbackIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="NVarChar(4000)")]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Body", DbType="NVarChar(4000)")]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromUser", DbType="Int NOT NULL")]
		public int FromUser
		{
			get
			{
				return this._FromUser;
			}
			set
			{
				if ((this._FromUser != value))
				{
					this.OnFromUserChanging(value);
					this.SendPropertyChanging();
					this._FromUser = value;
					this.SendPropertyChanged("FromUser");
					this.OnFromUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sent", DbType="DateTime NOT NULL")]
		public System.DateTime Sent
		{
			get
			{
				return this._Sent;
			}
			set
			{
				if ((this._Sent != value))
				{
					this.OnSentChanging(value);
					this.SendPropertyChanging();
					this._Sent = value;
					this.SendPropertyChanged("Sent");
					this.OnSentChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FileDetails")]
	public partial class FileDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FileDetailId;
		
		private int _UDBaseID;
		
		private int _UploaderID;
		
		private string _Filename;
		
		private string _Description;
		
		private int _FileSizeInBytes;
		
		private System.DateTime _Uploaded;
		
		private EntityRef<UDBase> _UDBase;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFileDetailIdChanging(int value);
    partial void OnFileDetailIdChanged();
    partial void OnUDBaseIDChanging(int value);
    partial void OnUDBaseIDChanged();
    partial void OnUploaderIDChanging(int value);
    partial void OnUploaderIDChanged();
    partial void OnFilenameChanging(string value);
    partial void OnFilenameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnFileSizeInBytesChanging(int value);
    partial void OnFileSizeInBytesChanged();
    partial void OnUploadedChanging(System.DateTime value);
    partial void OnUploadedChanged();
    #endregion
		
		public FileDetail()
		{
			this._UDBase = default(EntityRef<UDBase>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileDetailId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FileDetailId
		{
			get
			{
				return this._FileDetailId;
			}
			set
			{
				if ((this._FileDetailId != value))
				{
					this.OnFileDetailIdChanging(value);
					this.SendPropertyChanging();
					this._FileDetailId = value;
					this.SendPropertyChanged("FileDetailId");
					this.OnFileDetailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UDBaseID", DbType="Int NOT NULL")]
		public int UDBaseID
		{
			get
			{
				return this._UDBaseID;
			}
			set
			{
				if ((this._UDBaseID != value))
				{
					if (this._UDBase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUDBaseIDChanging(value);
					this.SendPropertyChanging();
					this._UDBaseID = value;
					this.SendPropertyChanged("UDBaseID");
					this.OnUDBaseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UploaderID", DbType="Int NOT NULL")]
		public int UploaderID
		{
			get
			{
				return this._UploaderID;
			}
			set
			{
				if ((this._UploaderID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUploaderIDChanging(value);
					this.SendPropertyChanging();
					this._UploaderID = value;
					this.SendPropertyChanged("UploaderID");
					this.OnUploaderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filename", DbType="NVarChar(4000)")]
		public string Filename
		{
			get
			{
				return this._Filename;
			}
			set
			{
				if ((this._Filename != value))
				{
					this.OnFilenameChanging(value);
					this.SendPropertyChanging();
					this._Filename = value;
					this.SendPropertyChanged("Filename");
					this.OnFilenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(4000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileSizeInBytes", DbType="Int NOT NULL")]
		public int FileSizeInBytes
		{
			get
			{
				return this._FileSizeInBytes;
			}
			set
			{
				if ((this._FileSizeInBytes != value))
				{
					this.OnFileSizeInBytesChanging(value);
					this.SendPropertyChanging();
					this._FileSizeInBytes = value;
					this.SendPropertyChanged("FileSizeInBytes");
					this.OnFileSizeInBytesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uploaded", DbType="DateTime NOT NULL")]
		public System.DateTime Uploaded
		{
			get
			{
				return this._Uploaded;
			}
			set
			{
				if ((this._Uploaded != value))
				{
					this.OnUploadedChanging(value);
					this.SendPropertyChanging();
					this._Uploaded = value;
					this.SendPropertyChanged("Uploaded");
					this.OnUploadedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UDBase_FileDetail", Storage="_UDBase", ThisKey="UDBaseID", OtherKey="UDBaseId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UDBase UDBase
		{
			get
			{
				return this._UDBase.Entity;
			}
			set
			{
				UDBase previousValue = this._UDBase.Entity;
				if (((previousValue != value) 
							|| (this._UDBase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UDBase.Entity = null;
						previousValue.FileDetails.Remove(this);
					}
					this._UDBase.Entity = value;
					if ((value != null))
					{
						value.FileDetails.Add(this);
						this._UDBaseID = value.UDBaseId;
					}
					else
					{
						this._UDBaseID = default(int);
					}
					this.SendPropertyChanged("UDBase");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_FileDetail", Storage="_User", ThisKey="UploaderID", OtherKey="UserId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.FileDetails.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.FileDetails.Add(this);
						this._UploaderID = value.UserId;
					}
					else
					{
						this._UploaderID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GFileAreas")]
	public partial class GFileArea : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GFileAreaId;
		
		private string _Title;
		
		private string _LongDescription;
		
		private int _ParentAreaId;
		
		private int _AccessLevel;
		
		private EntitySet<GFileDetail> _GFileDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGFileAreaIdChanging(int value);
    partial void OnGFileAreaIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnLongDescriptionChanging(string value);
    partial void OnLongDescriptionChanged();
    partial void OnParentAreaIdChanging(int value);
    partial void OnParentAreaIdChanged();
    partial void OnAccessLevelChanging(int value);
    partial void OnAccessLevelChanged();
    #endregion
		
		public GFileArea()
		{
			this._GFileDetails = new EntitySet<GFileDetail>(new Action<GFileDetail>(this.attach_GFileDetails), new Action<GFileDetail>(this.detach_GFileDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GFileAreaId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GFileAreaId
		{
			get
			{
				return this._GFileAreaId;
			}
			set
			{
				if ((this._GFileAreaId != value))
				{
					this.OnGFileAreaIdChanging(value);
					this.SendPropertyChanging();
					this._GFileAreaId = value;
					this.SendPropertyChanged("GFileAreaId");
					this.OnGFileAreaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(4000)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LongDescription", DbType="NVarChar(4000)")]
		public string LongDescription
		{
			get
			{
				return this._LongDescription;
			}
			set
			{
				if ((this._LongDescription != value))
				{
					this.OnLongDescriptionChanging(value);
					this.SendPropertyChanging();
					this._LongDescription = value;
					this.SendPropertyChanged("LongDescription");
					this.OnLongDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentAreaId", DbType="Int NOT NULL")]
		public int ParentAreaId
		{
			get
			{
				return this._ParentAreaId;
			}
			set
			{
				if ((this._ParentAreaId != value))
				{
					this.OnParentAreaIdChanging(value);
					this.SendPropertyChanging();
					this._ParentAreaId = value;
					this.SendPropertyChanged("ParentAreaId");
					this.OnParentAreaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessLevel", DbType="Int NOT NULL")]
		public int AccessLevel
		{
			get
			{
				return this._AccessLevel;
			}
			set
			{
				if ((this._AccessLevel != value))
				{
					this.OnAccessLevelChanging(value);
					this.SendPropertyChanging();
					this._AccessLevel = value;
					this.SendPropertyChanged("AccessLevel");
					this.OnAccessLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GFileArea_GFileDetail", Storage="_GFileDetails", ThisKey="GFileAreaId", OtherKey="GFileAreaId")]
		public EntitySet<GFileDetail> GFileDetails
		{
			get
			{
				return this._GFileDetails;
			}
			set
			{
				this._GFileDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GFileDetails(GFileDetail entity)
		{
			this.SendPropertyChanging();
			entity.GFileArea = this;
		}
		
		private void detach_GFileDetails(GFileDetail entity)
		{
			this.SendPropertyChanging();
			entity.GFileArea = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GFileDetails")]
	public partial class GFileDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GFileDetailId;
		
		private int _GFileAreaId;
		
		private string _Filename;
		
		private string _DisplayFilename;
		
		private string _Description;
		
		private bool _PETSCII;
		
		private int _FileSizeInBytes;
		
		private System.DateTime _Added;
		
		private EntityRef<GFileArea> _GFileArea;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGFileDetailIdChanging(int value);
    partial void OnGFileDetailIdChanged();
    partial void OnGFileAreaIdChanging(int value);
    partial void OnGFileAreaIdChanged();
    partial void OnFilenameChanging(string value);
    partial void OnFilenameChanged();
    partial void OnDisplayFilenameChanging(string value);
    partial void OnDisplayFilenameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPETSCIIChanging(bool value);
    partial void OnPETSCIIChanged();
    partial void OnFileSizeInBytesChanging(int value);
    partial void OnFileSizeInBytesChanged();
    partial void OnAddedChanging(System.DateTime value);
    partial void OnAddedChanged();
    #endregion
		
		public GFileDetail()
		{
			this._GFileArea = default(EntityRef<GFileArea>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GFileDetailId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GFileDetailId
		{
			get
			{
				return this._GFileDetailId;
			}
			set
			{
				if ((this._GFileDetailId != value))
				{
					this.OnGFileDetailIdChanging(value);
					this.SendPropertyChanging();
					this._GFileDetailId = value;
					this.SendPropertyChanged("GFileDetailId");
					this.OnGFileDetailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GFileAreaId", DbType="Int NOT NULL")]
		public int GFileAreaId
		{
			get
			{
				return this._GFileAreaId;
			}
			set
			{
				if ((this._GFileAreaId != value))
				{
					if (this._GFileArea.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGFileAreaIdChanging(value);
					this.SendPropertyChanging();
					this._GFileAreaId = value;
					this.SendPropertyChanged("GFileAreaId");
					this.OnGFileAreaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filename", DbType="NVarChar(4000)")]
		public string Filename
		{
			get
			{
				return this._Filename;
			}
			set
			{
				if ((this._Filename != value))
				{
					this.OnFilenameChanging(value);
					this.SendPropertyChanging();
					this._Filename = value;
					this.SendPropertyChanged("Filename");
					this.OnFilenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayFilename", DbType="NVarChar(40)")]
		public string DisplayFilename
		{
			get
			{
				return this._DisplayFilename;
			}
			set
			{
				if ((this._DisplayFilename != value))
				{
					this.OnDisplayFilenameChanging(value);
					this.SendPropertyChanging();
					this._DisplayFilename = value;
					this.SendPropertyChanged("DisplayFilename");
					this.OnDisplayFilenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(80)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PETSCII", DbType="Bit NOT NULL")]
		public bool PETSCII
		{
			get
			{
				return this._PETSCII;
			}
			set
			{
				if ((this._PETSCII != value))
				{
					this.OnPETSCIIChanging(value);
					this.SendPropertyChanging();
					this._PETSCII = value;
					this.SendPropertyChanged("PETSCII");
					this.OnPETSCIIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileSizeInBytes", DbType="Int NOT NULL")]
		public int FileSizeInBytes
		{
			get
			{
				return this._FileSizeInBytes;
			}
			set
			{
				if ((this._FileSizeInBytes != value))
				{
					this.OnFileSizeInBytesChanging(value);
					this.SendPropertyChanging();
					this._FileSizeInBytes = value;
					this.SendPropertyChanged("FileSizeInBytes");
					this.OnFileSizeInBytesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Added", DbType="DateTime NOT NULL")]
		public System.DateTime Added
		{
			get
			{
				return this._Added;
			}
			set
			{
				if ((this._Added != value))
				{
					this.OnAddedChanging(value);
					this.SendPropertyChanging();
					this._Added = value;
					this.SendPropertyChanged("Added");
					this.OnAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GFileArea_GFileDetail", Storage="_GFileArea", ThisKey="GFileAreaId", OtherKey="GFileAreaId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public GFileArea GFileArea
		{
			get
			{
				return this._GFileArea.Entity;
			}
			set
			{
				GFileArea previousValue = this._GFileArea.Entity;
				if (((previousValue != value) 
							|| (this._GFileArea.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GFileArea.Entity = null;
						previousValue.GFileDetails.Remove(this);
					}
					this._GFileArea.Entity = value;
					if ((value != null))
					{
						value.GFileDetails.Add(this);
						this._GFileAreaId = value.GFileAreaId;
					}
					else
					{
						this._GFileAreaId = default(int);
					}
					this.SendPropertyChanged("GFileArea");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Graffiti")]
	public partial class Graffiti : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GraffitiId;
		
		private string _Content;
		
		private int _UserId;
		
		private System.DateTime _Posted;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGraffitiIdChanging(int value);
    partial void OnGraffitiIdChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnPostedChanging(System.DateTime value);
    partial void OnPostedChanged();
    #endregion
		
		public Graffiti()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GraffitiId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GraffitiId
		{
			get
			{
				return this._GraffitiId;
			}
			set
			{
				if ((this._GraffitiId != value))
				{
					this.OnGraffitiIdChanging(value);
					this.SendPropertyChanging();
					this._GraffitiId = value;
					this.SendPropertyChanged("GraffitiId");
					this.OnGraffitiIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(4000)")]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Posted", DbType="DateTime NOT NULL")]
		public System.DateTime Posted
		{
			get
			{
				return this._Posted;
			}
			set
			{
				if ((this._Posted != value))
				{
					this.OnPostedChanging(value);
					this.SendPropertyChanging();
					this._Posted = value;
					this.SendPropertyChanged("Posted");
					this.OnPostedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MessageBaseAreas")]
	public partial class MessageBaseArea : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageBaseAreaId;
		
		private string _Title;
		
		private string _LongDescription;
		
		private int _ParentAreaId;
		
		private int _AccessLevel;
		
		private EntitySet<MessageBase> _MessageBases;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageBaseAreaIdChanging(int value);
    partial void OnMessageBaseAreaIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnLongDescriptionChanging(string value);
    partial void OnLongDescriptionChanged();
    partial void OnParentAreaIdChanging(int value);
    partial void OnParentAreaIdChanged();
    partial void OnAccessLevelChanging(int value);
    partial void OnAccessLevelChanged();
    #endregion
		
		public MessageBaseArea()
		{
			this._MessageBases = new EntitySet<MessageBase>(new Action<MessageBase>(this.attach_MessageBases), new Action<MessageBase>(this.detach_MessageBases));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageBaseAreaId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MessageBaseAreaId
		{
			get
			{
				return this._MessageBaseAreaId;
			}
			set
			{
				if ((this._MessageBaseAreaId != value))
				{
					this.OnMessageBaseAreaIdChanging(value);
					this.SendPropertyChanging();
					this._MessageBaseAreaId = value;
					this.SendPropertyChanged("MessageBaseAreaId");
					this.OnMessageBaseAreaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(4000)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LongDescription", DbType="NVarChar(4000)")]
		public string LongDescription
		{
			get
			{
				return this._LongDescription;
			}
			set
			{
				if ((this._LongDescription != value))
				{
					this.OnLongDescriptionChanging(value);
					this.SendPropertyChanging();
					this._LongDescription = value;
					this.SendPropertyChanged("LongDescription");
					this.OnLongDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentAreaId", DbType="Int NOT NULL")]
		public int ParentAreaId
		{
			get
			{
				return this._ParentAreaId;
			}
			set
			{
				if ((this._ParentAreaId != value))
				{
					this.OnParentAreaIdChanging(value);
					this.SendPropertyChanging();
					this._ParentAreaId = value;
					this.SendPropertyChanged("ParentAreaId");
					this.OnParentAreaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessLevel", DbType="Int NOT NULL")]
		public int AccessLevel
		{
			get
			{
				return this._AccessLevel;
			}
			set
			{
				if ((this._AccessLevel != value))
				{
					this.OnAccessLevelChanging(value);
					this.SendPropertyChanging();
					this._AccessLevel = value;
					this.SendPropertyChanged("AccessLevel");
					this.OnAccessLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MessageBaseArea_MessageBase", Storage="_MessageBases", ThisKey="MessageBaseAreaId", OtherKey="MessageBaseArea_MessageBaseAreaId")]
		public EntitySet<MessageBase> MessageBases
		{
			get
			{
				return this._MessageBases;
			}
			set
			{
				this._MessageBases.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MessageBases(MessageBase entity)
		{
			this.SendPropertyChanging();
			entity.MessageBaseArea = this;
		}
		
		private void detach_MessageBases(MessageBase entity)
		{
			this.SendPropertyChanging();
			entity.MessageBaseArea = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MessageBases")]
	public partial class MessageBase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageBaseId;
		
		private string _Title;
		
		private string _LongDescription;
		
		private int _ParentArea;
		
		private int _AccessLevel;
		
		private System.Nullable<int> _MessageBaseArea_MessageBaseAreaId;
		
		private EntitySet<MessageHeader> _MessageHeaders;
		
		private EntitySet<UserMessageBase> _UserMessageBases;
		
		private EntityRef<MessageBaseArea> _MessageBaseArea;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageBaseIdChanging(int value);
    partial void OnMessageBaseIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnLongDescriptionChanging(string value);
    partial void OnLongDescriptionChanged();
    partial void OnParentAreaChanging(int value);
    partial void OnParentAreaChanged();
    partial void OnAccessLevelChanging(int value);
    partial void OnAccessLevelChanged();
    partial void OnMessageBaseArea_MessageBaseAreaIdChanging(System.Nullable<int> value);
    partial void OnMessageBaseArea_MessageBaseAreaIdChanged();
    #endregion
		
		public MessageBase()
		{
			this._MessageHeaders = new EntitySet<MessageHeader>(new Action<MessageHeader>(this.attach_MessageHeaders), new Action<MessageHeader>(this.detach_MessageHeaders));
			this._UserMessageBases = new EntitySet<UserMessageBase>(new Action<UserMessageBase>(this.attach_UserMessageBases), new Action<UserMessageBase>(this.detach_UserMessageBases));
			this._MessageBaseArea = default(EntityRef<MessageBaseArea>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageBaseId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MessageBaseId
		{
			get
			{
				return this._MessageBaseId;
			}
			set
			{
				if ((this._MessageBaseId != value))
				{
					this.OnMessageBaseIdChanging(value);
					this.SendPropertyChanging();
					this._MessageBaseId = value;
					this.SendPropertyChanged("MessageBaseId");
					this.OnMessageBaseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(4000)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LongDescription", DbType="NVarChar(4000)")]
		public string LongDescription
		{
			get
			{
				return this._LongDescription;
			}
			set
			{
				if ((this._LongDescription != value))
				{
					this.OnLongDescriptionChanging(value);
					this.SendPropertyChanging();
					this._LongDescription = value;
					this.SendPropertyChanged("LongDescription");
					this.OnLongDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentArea", DbType="Int NOT NULL")]
		public int ParentArea
		{
			get
			{
				return this._ParentArea;
			}
			set
			{
				if ((this._ParentArea != value))
				{
					this.OnParentAreaChanging(value);
					this.SendPropertyChanging();
					this._ParentArea = value;
					this.SendPropertyChanged("ParentArea");
					this.OnParentAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessLevel", DbType="Int NOT NULL")]
		public int AccessLevel
		{
			get
			{
				return this._AccessLevel;
			}
			set
			{
				if ((this._AccessLevel != value))
				{
					this.OnAccessLevelChanging(value);
					this.SendPropertyChanging();
					this._AccessLevel = value;
					this.SendPropertyChanged("AccessLevel");
					this.OnAccessLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageBaseArea_MessageBaseAreaId", DbType="Int")]
		public System.Nullable<int> MessageBaseArea_MessageBaseAreaId
		{
			get
			{
				return this._MessageBaseArea_MessageBaseAreaId;
			}
			set
			{
				if ((this._MessageBaseArea_MessageBaseAreaId != value))
				{
					if (this._MessageBaseArea.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessageBaseArea_MessageBaseAreaIdChanging(value);
					this.SendPropertyChanging();
					this._MessageBaseArea_MessageBaseAreaId = value;
					this.SendPropertyChanged("MessageBaseArea_MessageBaseAreaId");
					this.OnMessageBaseArea_MessageBaseAreaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MessageBase_MessageHeader", Storage="_MessageHeaders", ThisKey="MessageBaseId", OtherKey="MessageBaseId")]
		public EntitySet<MessageHeader> MessageHeaders
		{
			get
			{
				return this._MessageHeaders;
			}
			set
			{
				this._MessageHeaders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MessageBase_UserMessageBase", Storage="_UserMessageBases", ThisKey="MessageBaseId", OtherKey="MessageBaseId")]
		public EntitySet<UserMessageBase> UserMessageBases
		{
			get
			{
				return this._UserMessageBases;
			}
			set
			{
				this._UserMessageBases.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MessageBaseArea_MessageBase", Storage="_MessageBaseArea", ThisKey="MessageBaseArea_MessageBaseAreaId", OtherKey="MessageBaseAreaId", IsForeignKey=true)]
		public MessageBaseArea MessageBaseArea
		{
			get
			{
				return this._MessageBaseArea.Entity;
			}
			set
			{
				MessageBaseArea previousValue = this._MessageBaseArea.Entity;
				if (((previousValue != value) 
							|| (this._MessageBaseArea.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MessageBaseArea.Entity = null;
						previousValue.MessageBases.Remove(this);
					}
					this._MessageBaseArea.Entity = value;
					if ((value != null))
					{
						value.MessageBases.Add(this);
						this._MessageBaseArea_MessageBaseAreaId = value.MessageBaseAreaId;
					}
					else
					{
						this._MessageBaseArea_MessageBaseAreaId = default(Nullable<int>);
					}
					this.SendPropertyChanged("MessageBaseArea");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MessageHeaders(MessageHeader entity)
		{
			this.SendPropertyChanging();
			entity.MessageBase = this;
		}
		
		private void detach_MessageHeaders(MessageHeader entity)
		{
			this.SendPropertyChanging();
			entity.MessageBase = null;
		}
		
		private void attach_UserMessageBases(UserMessageBase entity)
		{
			this.SendPropertyChanging();
			entity.MessageBase = this;
		}
		
		private void detach_UserMessageBases(UserMessageBase entity)
		{
			this.SendPropertyChanging();
			entity.MessageBase = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MessageBodies")]
	public partial class MessageBody : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageBodyId;
		
		private int _MessageHeaderId;
		
		private string _Body;
		
		private EntitySet<MessageHeader> _MessageHeaders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageBodyIdChanging(int value);
    partial void OnMessageBodyIdChanged();
    partial void OnMessageHeaderIdChanging(int value);
    partial void OnMessageHeaderIdChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    #endregion
		
		public MessageBody()
		{
			this._MessageHeaders = new EntitySet<MessageHeader>(new Action<MessageHeader>(this.attach_MessageHeaders), new Action<MessageHeader>(this.detach_MessageHeaders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageBodyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MessageBodyId
		{
			get
			{
				return this._MessageBodyId;
			}
			set
			{
				if ((this._MessageBodyId != value))
				{
					this.OnMessageBodyIdChanging(value);
					this.SendPropertyChanging();
					this._MessageBodyId = value;
					this.SendPropertyChanged("MessageBodyId");
					this.OnMessageBodyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageHeaderId", DbType="Int NOT NULL")]
		public int MessageHeaderId
		{
			get
			{
				return this._MessageHeaderId;
			}
			set
			{
				if ((this._MessageHeaderId != value))
				{
					this.OnMessageHeaderIdChanging(value);
					this.SendPropertyChanging();
					this._MessageHeaderId = value;
					this.SendPropertyChanged("MessageHeaderId");
					this.OnMessageHeaderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Body", DbType="NVarChar(4000)")]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MessageBody_MessageHeader", Storage="_MessageHeaders", ThisKey="MessageBodyId", OtherKey="MessageBody_MessageBodyId")]
		public EntitySet<MessageHeader> MessageHeaders
		{
			get
			{
				return this._MessageHeaders;
			}
			set
			{
				this._MessageHeaders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MessageHeaders(MessageHeader entity)
		{
			this.SendPropertyChanging();
			entity.MessageBody = this;
		}
		
		private void detach_MessageHeaders(MessageHeader entity)
		{
			this.SendPropertyChanging();
			entity.MessageBody = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MessageHeaders")]
	public partial class MessageHeader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageHeaderId;
		
		private int _MessageThreadId;
		
		private int _MessageBaseId;
		
		private string _Subject;
		
		private bool _Anonymous;
		
		private int _UserId;
		
		private System.DateTime _Posted;
		
		private System.Nullable<int> _MessageBody_MessageBodyId;
		
		private System.Nullable<int> _MessageHeader_MessageHeaderId;
		
		private EntitySet<MessageHeader> _MessageHeaders;
		
		private EntityRef<MessageBase> _MessageBase;
		
		private EntityRef<MessageBody> _MessageBody;
		
		private EntityRef<MessageHeader> _MessageHeader1;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageHeaderIdChanging(int value);
    partial void OnMessageHeaderIdChanged();
    partial void OnMessageThreadIdChanging(int value);
    partial void OnMessageThreadIdChanged();
    partial void OnMessageBaseIdChanging(int value);
    partial void OnMessageBaseIdChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnAnonymousChanging(bool value);
    partial void OnAnonymousChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnPostedChanging(System.DateTime value);
    partial void OnPostedChanged();
    partial void OnMessageBody_MessageBodyIdChanging(System.Nullable<int> value);
    partial void OnMessageBody_MessageBodyIdChanged();
    partial void OnMessageHeader_MessageHeaderIdChanging(System.Nullable<int> value);
    partial void OnMessageHeader_MessageHeaderIdChanged();
    #endregion
		
		public MessageHeader()
		{
			this._MessageHeaders = new EntitySet<MessageHeader>(new Action<MessageHeader>(this.attach_MessageHeaders), new Action<MessageHeader>(this.detach_MessageHeaders));
			this._MessageBase = default(EntityRef<MessageBase>);
			this._MessageBody = default(EntityRef<MessageBody>);
			this._MessageHeader1 = default(EntityRef<MessageHeader>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageHeaderId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MessageHeaderId
		{
			get
			{
				return this._MessageHeaderId;
			}
			set
			{
				if ((this._MessageHeaderId != value))
				{
					this.OnMessageHeaderIdChanging(value);
					this.SendPropertyChanging();
					this._MessageHeaderId = value;
					this.SendPropertyChanged("MessageHeaderId");
					this.OnMessageHeaderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageThreadId", DbType="Int NOT NULL")]
		public int MessageThreadId
		{
			get
			{
				return this._MessageThreadId;
			}
			set
			{
				if ((this._MessageThreadId != value))
				{
					this.OnMessageThreadIdChanging(value);
					this.SendPropertyChanging();
					this._MessageThreadId = value;
					this.SendPropertyChanged("MessageThreadId");
					this.OnMessageThreadIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageBaseId", DbType="Int NOT NULL")]
		public int MessageBaseId
		{
			get
			{
				return this._MessageBaseId;
			}
			set
			{
				if ((this._MessageBaseId != value))
				{
					if (this._MessageBase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessageBaseIdChanging(value);
					this.SendPropertyChanging();
					this._MessageBaseId = value;
					this.SendPropertyChanged("MessageBaseId");
					this.OnMessageBaseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="NVarChar(4000)")]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Anonymous", DbType="Bit NOT NULL")]
		public bool Anonymous
		{
			get
			{
				return this._Anonymous;
			}
			set
			{
				if ((this._Anonymous != value))
				{
					this.OnAnonymousChanging(value);
					this.SendPropertyChanging();
					this._Anonymous = value;
					this.SendPropertyChanged("Anonymous");
					this.OnAnonymousChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Posted", DbType="DateTime NOT NULL")]
		public System.DateTime Posted
		{
			get
			{
				return this._Posted;
			}
			set
			{
				if ((this._Posted != value))
				{
					this.OnPostedChanging(value);
					this.SendPropertyChanging();
					this._Posted = value;
					this.SendPropertyChanged("Posted");
					this.OnPostedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageBody_MessageBodyId", DbType="Int")]
		public System.Nullable<int> MessageBody_MessageBodyId
		{
			get
			{
				return this._MessageBody_MessageBodyId;
			}
			set
			{
				if ((this._MessageBody_MessageBodyId != value))
				{
					if (this._MessageBody.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessageBody_MessageBodyIdChanging(value);
					this.SendPropertyChanging();
					this._MessageBody_MessageBodyId = value;
					this.SendPropertyChanged("MessageBody_MessageBodyId");
					this.OnMessageBody_MessageBodyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageHeader_MessageHeaderId", DbType="Int")]
		public System.Nullable<int> MessageHeader_MessageHeaderId
		{
			get
			{
				return this._MessageHeader_MessageHeaderId;
			}
			set
			{
				if ((this._MessageHeader_MessageHeaderId != value))
				{
					if (this._MessageHeader1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessageHeader_MessageHeaderIdChanging(value);
					this.SendPropertyChanging();
					this._MessageHeader_MessageHeaderId = value;
					this.SendPropertyChanged("MessageHeader_MessageHeaderId");
					this.OnMessageHeader_MessageHeaderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MessageHeader_MessageHeader", Storage="_MessageHeaders", ThisKey="MessageHeaderId", OtherKey="MessageHeader_MessageHeaderId")]
		public EntitySet<MessageHeader> MessageHeaders
		{
			get
			{
				return this._MessageHeaders;
			}
			set
			{
				this._MessageHeaders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MessageBase_MessageHeader", Storage="_MessageBase", ThisKey="MessageBaseId", OtherKey="MessageBaseId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MessageBase MessageBase
		{
			get
			{
				return this._MessageBase.Entity;
			}
			set
			{
				MessageBase previousValue = this._MessageBase.Entity;
				if (((previousValue != value) 
							|| (this._MessageBase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MessageBase.Entity = null;
						previousValue.MessageHeaders.Remove(this);
					}
					this._MessageBase.Entity = value;
					if ((value != null))
					{
						value.MessageHeaders.Add(this);
						this._MessageBaseId = value.MessageBaseId;
					}
					else
					{
						this._MessageBaseId = default(int);
					}
					this.SendPropertyChanged("MessageBase");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MessageBody_MessageHeader", Storage="_MessageBody", ThisKey="MessageBody_MessageBodyId", OtherKey="MessageBodyId", IsForeignKey=true)]
		public MessageBody MessageBody
		{
			get
			{
				return this._MessageBody.Entity;
			}
			set
			{
				MessageBody previousValue = this._MessageBody.Entity;
				if (((previousValue != value) 
							|| (this._MessageBody.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MessageBody.Entity = null;
						previousValue.MessageHeaders.Remove(this);
					}
					this._MessageBody.Entity = value;
					if ((value != null))
					{
						value.MessageHeaders.Add(this);
						this._MessageBody_MessageBodyId = value.MessageBodyId;
					}
					else
					{
						this._MessageBody_MessageBodyId = default(Nullable<int>);
					}
					this.SendPropertyChanged("MessageBody");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MessageHeader_MessageHeader", Storage="_MessageHeader1", ThisKey="MessageHeader_MessageHeaderId", OtherKey="MessageHeaderId", IsForeignKey=true)]
		public MessageHeader MessageHeader1
		{
			get
			{
				return this._MessageHeader1.Entity;
			}
			set
			{
				MessageHeader previousValue = this._MessageHeader1.Entity;
				if (((previousValue != value) 
							|| (this._MessageHeader1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MessageHeader1.Entity = null;
						previousValue.MessageHeaders.Remove(this);
					}
					this._MessageHeader1.Entity = value;
					if ((value != null))
					{
						value.MessageHeaders.Add(this);
						this._MessageHeader_MessageHeaderId = value.MessageHeaderId;
					}
					else
					{
						this._MessageHeader_MessageHeaderId = default(Nullable<int>);
					}
					this.SendPropertyChanged("MessageHeader1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MessageHeader", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.MessageHeaders.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.MessageHeaders.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MessageHeaders(MessageHeader entity)
		{
			this.SendPropertyChanging();
			entity.MessageHeader1 = this;
		}
		
		private void detach_MessageHeaders(MessageHeader entity)
		{
			this.SendPropertyChanging();
			entity.MessageHeader1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MessageThreads")]
	public partial class MessageThread : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageThreadId;
		
		private int _MessageBaseId;
		
		private int _InitialMessageHeaderId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageThreadIdChanging(int value);
    partial void OnMessageThreadIdChanged();
    partial void OnMessageBaseIdChanging(int value);
    partial void OnMessageBaseIdChanged();
    partial void OnInitialMessageHeaderIdChanging(int value);
    partial void OnInitialMessageHeaderIdChanged();
    #endregion
		
		public MessageThread()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageThreadId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MessageThreadId
		{
			get
			{
				return this._MessageThreadId;
			}
			set
			{
				if ((this._MessageThreadId != value))
				{
					this.OnMessageThreadIdChanging(value);
					this.SendPropertyChanging();
					this._MessageThreadId = value;
					this.SendPropertyChanged("MessageThreadId");
					this.OnMessageThreadIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageBaseId", DbType="Int NOT NULL")]
		public int MessageBaseId
		{
			get
			{
				return this._MessageBaseId;
			}
			set
			{
				if ((this._MessageBaseId != value))
				{
					this.OnMessageBaseIdChanging(value);
					this.SendPropertyChanging();
					this._MessageBaseId = value;
					this.SendPropertyChanged("MessageBaseId");
					this.OnMessageBaseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InitialMessageHeaderId", DbType="Int NOT NULL")]
		public int InitialMessageHeaderId
		{
			get
			{
				return this._InitialMessageHeaderId;
			}
			set
			{
				if ((this._InitialMessageHeaderId != value))
				{
					this.OnInitialMessageHeaderIdChanging(value);
					this.SendPropertyChanging();
					this._InitialMessageHeaderId = value;
					this.SendPropertyChanged("InitialMessageHeaderId");
					this.OnInitialMessageHeaderIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.News_Item")]
	public partial class News_Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _News_ItemId;
		
		private System.DateTime _Posted;
		
		private int _UserId;
		
		private string _Subject;
		
		private string _Body;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNews_ItemIdChanging(int value);
    partial void OnNews_ItemIdChanged();
    partial void OnPostedChanging(System.DateTime value);
    partial void OnPostedChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    #endregion
		
		public News_Item()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_News_ItemId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int News_ItemId
		{
			get
			{
				return this._News_ItemId;
			}
			set
			{
				if ((this._News_ItemId != value))
				{
					this.OnNews_ItemIdChanging(value);
					this.SendPropertyChanging();
					this._News_ItemId = value;
					this.SendPropertyChanged("News_ItemId");
					this.OnNews_ItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Posted", DbType="DateTime NOT NULL")]
		public System.DateTime Posted
		{
			get
			{
				return this._Posted;
			}
			set
			{
				if ((this._Posted != value))
				{
					this.OnPostedChanging(value);
					this.SendPropertyChanging();
					this._Posted = value;
					this.SendPropertyChanged("Posted");
					this.OnPostedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="NVarChar(4000)")]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Body", DbType="NVarChar(4000)")]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PFileAreas")]
	public partial class PFileArea : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PFileAreaId;
		
		private string _Title;
		
		private string _LongDescription;
		
		private int _ParentAreaId;
		
		private int _AccessLevel;
		
		private EntitySet<PFileDetail> _PFileDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPFileAreaIdChanging(int value);
    partial void OnPFileAreaIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnLongDescriptionChanging(string value);
    partial void OnLongDescriptionChanged();
    partial void OnParentAreaIdChanging(int value);
    partial void OnParentAreaIdChanged();
    partial void OnAccessLevelChanging(int value);
    partial void OnAccessLevelChanged();
    #endregion
		
		public PFileArea()
		{
			this._PFileDetails = new EntitySet<PFileDetail>(new Action<PFileDetail>(this.attach_PFileDetails), new Action<PFileDetail>(this.detach_PFileDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PFileAreaId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PFileAreaId
		{
			get
			{
				return this._PFileAreaId;
			}
			set
			{
				if ((this._PFileAreaId != value))
				{
					this.OnPFileAreaIdChanging(value);
					this.SendPropertyChanging();
					this._PFileAreaId = value;
					this.SendPropertyChanged("PFileAreaId");
					this.OnPFileAreaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(4000)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LongDescription", DbType="NVarChar(4000)")]
		public string LongDescription
		{
			get
			{
				return this._LongDescription;
			}
			set
			{
				if ((this._LongDescription != value))
				{
					this.OnLongDescriptionChanging(value);
					this.SendPropertyChanging();
					this._LongDescription = value;
					this.SendPropertyChanged("LongDescription");
					this.OnLongDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentAreaId", DbType="Int NOT NULL")]
		public int ParentAreaId
		{
			get
			{
				return this._ParentAreaId;
			}
			set
			{
				if ((this._ParentAreaId != value))
				{
					this.OnParentAreaIdChanging(value);
					this.SendPropertyChanging();
					this._ParentAreaId = value;
					this.SendPropertyChanged("ParentAreaId");
					this.OnParentAreaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessLevel", DbType="Int NOT NULL")]
		public int AccessLevel
		{
			get
			{
				return this._AccessLevel;
			}
			set
			{
				if ((this._AccessLevel != value))
				{
					this.OnAccessLevelChanging(value);
					this.SendPropertyChanging();
					this._AccessLevel = value;
					this.SendPropertyChanged("AccessLevel");
					this.OnAccessLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PFileArea_PFileDetail", Storage="_PFileDetails", ThisKey="PFileAreaId", OtherKey="PFileArea_PFileAreaId")]
		public EntitySet<PFileDetail> PFileDetails
		{
			get
			{
				return this._PFileDetails;
			}
			set
			{
				this._PFileDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PFileDetails(PFileDetail entity)
		{
			this.SendPropertyChanging();
			entity.PFileArea = this;
		}
		
		private void detach_PFileDetails(PFileDetail entity)
		{
			this.SendPropertyChanging();
			entity.PFileArea = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PFileDetails")]
	public partial class PFileDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PFileDetailId;
		
		private int _PFileNumber;
		
		private int _ParentAreaId;
		
		private string _Filename;
		
		private string _Description;
		
		private System.DateTime _Added;
		
		private System.Nullable<int> _PFileArea_PFileAreaId;
		
		private EntityRef<PFileArea> _PFileArea;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPFileDetailIdChanging(int value);
    partial void OnPFileDetailIdChanged();
    partial void OnPFileNumberChanging(int value);
    partial void OnPFileNumberChanged();
    partial void OnParentAreaIdChanging(int value);
    partial void OnParentAreaIdChanged();
    partial void OnFilenameChanging(string value);
    partial void OnFilenameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAddedChanging(System.DateTime value);
    partial void OnAddedChanged();
    partial void OnPFileArea_PFileAreaIdChanging(System.Nullable<int> value);
    partial void OnPFileArea_PFileAreaIdChanged();
    #endregion
		
		public PFileDetail()
		{
			this._PFileArea = default(EntityRef<PFileArea>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PFileDetailId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PFileDetailId
		{
			get
			{
				return this._PFileDetailId;
			}
			set
			{
				if ((this._PFileDetailId != value))
				{
					this.OnPFileDetailIdChanging(value);
					this.SendPropertyChanging();
					this._PFileDetailId = value;
					this.SendPropertyChanged("PFileDetailId");
					this.OnPFileDetailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PFileNumber", DbType="Int NOT NULL")]
		public int PFileNumber
		{
			get
			{
				return this._PFileNumber;
			}
			set
			{
				if ((this._PFileNumber != value))
				{
					this.OnPFileNumberChanging(value);
					this.SendPropertyChanging();
					this._PFileNumber = value;
					this.SendPropertyChanged("PFileNumber");
					this.OnPFileNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentAreaId", DbType="Int NOT NULL")]
		public int ParentAreaId
		{
			get
			{
				return this._ParentAreaId;
			}
			set
			{
				if ((this._ParentAreaId != value))
				{
					this.OnParentAreaIdChanging(value);
					this.SendPropertyChanging();
					this._ParentAreaId = value;
					this.SendPropertyChanged("ParentAreaId");
					this.OnParentAreaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filename", DbType="NVarChar(4000)")]
		public string Filename
		{
			get
			{
				return this._Filename;
			}
			set
			{
				if ((this._Filename != value))
				{
					this.OnFilenameChanging(value);
					this.SendPropertyChanging();
					this._Filename = value;
					this.SendPropertyChanged("Filename");
					this.OnFilenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(4000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Added", DbType="DateTime NOT NULL")]
		public System.DateTime Added
		{
			get
			{
				return this._Added;
			}
			set
			{
				if ((this._Added != value))
				{
					this.OnAddedChanging(value);
					this.SendPropertyChanging();
					this._Added = value;
					this.SendPropertyChanged("Added");
					this.OnAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PFileArea_PFileAreaId", DbType="Int")]
		public System.Nullable<int> PFileArea_PFileAreaId
		{
			get
			{
				return this._PFileArea_PFileAreaId;
			}
			set
			{
				if ((this._PFileArea_PFileAreaId != value))
				{
					if (this._PFileArea.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPFileArea_PFileAreaIdChanging(value);
					this.SendPropertyChanging();
					this._PFileArea_PFileAreaId = value;
					this.SendPropertyChanged("PFileArea_PFileAreaId");
					this.OnPFileArea_PFileAreaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PFileArea_PFileDetail", Storage="_PFileArea", ThisKey="PFileArea_PFileAreaId", OtherKey="PFileAreaId", IsForeignKey=true)]
		public PFileArea PFileArea
		{
			get
			{
				return this._PFileArea.Entity;
			}
			set
			{
				PFileArea previousValue = this._PFileArea.Entity;
				if (((previousValue != value) 
							|| (this._PFileArea.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PFileArea.Entity = null;
						previousValue.PFileDetails.Remove(this);
					}
					this._PFileArea.Entity = value;
					if ((value != null))
					{
						value.PFileDetails.Add(this);
						this._PFileArea_PFileAreaId = value.PFileAreaId;
					}
					else
					{
						this._PFileArea_PFileAreaId = default(Nullable<int>);
					}
					this.SendPropertyChanged("PFileArea");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SysConfigs")]
	public partial class SysConfig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SysConfigId;
		
		private int _DatabaseVersion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSysConfigIdChanging(int value);
    partial void OnSysConfigIdChanged();
    partial void OnDatabaseVersionChanging(int value);
    partial void OnDatabaseVersionChanged();
    #endregion
		
		public SysConfig()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SysConfigId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SysConfigId
		{
			get
			{
				return this._SysConfigId;
			}
			set
			{
				if ((this._SysConfigId != value))
				{
					this.OnSysConfigIdChanging(value);
					this.SendPropertyChanging();
					this._SysConfigId = value;
					this.SendPropertyChanged("SysConfigId");
					this.OnSysConfigIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatabaseVersion", DbType="Int NOT NULL")]
		public int DatabaseVersion
		{
			get
			{
				return this._DatabaseVersion;
			}
			set
			{
				if ((this._DatabaseVersion != value))
				{
					this.OnDatabaseVersionChanging(value);
					this.SendPropertyChanging();
					this._DatabaseVersion = value;
					this.SendPropertyChanged("DatabaseVersion");
					this.OnDatabaseVersionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UDBaseAreas")]
	public partial class UDBaseArea : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UDBaseAreaId;
		
		private string _Title;
		
		private string _LongDescription;
		
		private int _ParentAreaId;
		
		private int _AccessLevel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUDBaseAreaIdChanging(int value);
    partial void OnUDBaseAreaIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnLongDescriptionChanging(string value);
    partial void OnLongDescriptionChanged();
    partial void OnParentAreaIdChanging(int value);
    partial void OnParentAreaIdChanged();
    partial void OnAccessLevelChanging(int value);
    partial void OnAccessLevelChanged();
    #endregion
		
		public UDBaseArea()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UDBaseAreaId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UDBaseAreaId
		{
			get
			{
				return this._UDBaseAreaId;
			}
			set
			{
				if ((this._UDBaseAreaId != value))
				{
					this.OnUDBaseAreaIdChanging(value);
					this.SendPropertyChanging();
					this._UDBaseAreaId = value;
					this.SendPropertyChanged("UDBaseAreaId");
					this.OnUDBaseAreaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(4000)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LongDescription", DbType="NVarChar(4000)")]
		public string LongDescription
		{
			get
			{
				return this._LongDescription;
			}
			set
			{
				if ((this._LongDescription != value))
				{
					this.OnLongDescriptionChanging(value);
					this.SendPropertyChanging();
					this._LongDescription = value;
					this.SendPropertyChanged("LongDescription");
					this.OnLongDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentAreaId", DbType="Int NOT NULL")]
		public int ParentAreaId
		{
			get
			{
				return this._ParentAreaId;
			}
			set
			{
				if ((this._ParentAreaId != value))
				{
					this.OnParentAreaIdChanging(value);
					this.SendPropertyChanging();
					this._ParentAreaId = value;
					this.SendPropertyChanged("ParentAreaId");
					this.OnParentAreaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessLevel", DbType="Int NOT NULL")]
		public int AccessLevel
		{
			get
			{
				return this._AccessLevel;
			}
			set
			{
				if ((this._AccessLevel != value))
				{
					this.OnAccessLevelChanging(value);
					this.SendPropertyChanging();
					this._AccessLevel = value;
					this.SendPropertyChanged("AccessLevel");
					this.OnAccessLevelChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UDBases")]
	public partial class UDBase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UDBaseId;
		
		private string _Title;
		
		private string _LongDescription;
		
		private int _ParentArea;
		
		private int _AccessLevel;
		
		private string _FilePath;
		
		private EntitySet<UserUDBase> _UserUDBases;
		
		private EntitySet<FileDetail> _FileDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUDBaseIdChanging(int value);
    partial void OnUDBaseIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnLongDescriptionChanging(string value);
    partial void OnLongDescriptionChanged();
    partial void OnParentAreaChanging(int value);
    partial void OnParentAreaChanged();
    partial void OnAccessLevelChanging(int value);
    partial void OnAccessLevelChanged();
    partial void OnFilePathChanging(string value);
    partial void OnFilePathChanged();
    #endregion
		
		public UDBase()
		{
			this._UserUDBases = new EntitySet<UserUDBase>(new Action<UserUDBase>(this.attach_UserUDBases), new Action<UserUDBase>(this.detach_UserUDBases));
			this._FileDetails = new EntitySet<FileDetail>(new Action<FileDetail>(this.attach_FileDetails), new Action<FileDetail>(this.detach_FileDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UDBaseId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UDBaseId
		{
			get
			{
				return this._UDBaseId;
			}
			set
			{
				if ((this._UDBaseId != value))
				{
					this.OnUDBaseIdChanging(value);
					this.SendPropertyChanging();
					this._UDBaseId = value;
					this.SendPropertyChanged("UDBaseId");
					this.OnUDBaseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(4000)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LongDescription", DbType="NVarChar(4000)")]
		public string LongDescription
		{
			get
			{
				return this._LongDescription;
			}
			set
			{
				if ((this._LongDescription != value))
				{
					this.OnLongDescriptionChanging(value);
					this.SendPropertyChanging();
					this._LongDescription = value;
					this.SendPropertyChanged("LongDescription");
					this.OnLongDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentArea", DbType="Int NOT NULL")]
		public int ParentArea
		{
			get
			{
				return this._ParentArea;
			}
			set
			{
				if ((this._ParentArea != value))
				{
					this.OnParentAreaChanging(value);
					this.SendPropertyChanging();
					this._ParentArea = value;
					this.SendPropertyChanged("ParentArea");
					this.OnParentAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessLevel", DbType="Int NOT NULL")]
		public int AccessLevel
		{
			get
			{
				return this._AccessLevel;
			}
			set
			{
				if ((this._AccessLevel != value))
				{
					this.OnAccessLevelChanging(value);
					this.SendPropertyChanging();
					this._AccessLevel = value;
					this.SendPropertyChanged("AccessLevel");
					this.OnAccessLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilePath", DbType="NVarChar(255)")]
		public string FilePath
		{
			get
			{
				return this._FilePath;
			}
			set
			{
				if ((this._FilePath != value))
				{
					this.OnFilePathChanging(value);
					this.SendPropertyChanging();
					this._FilePath = value;
					this.SendPropertyChanged("FilePath");
					this.OnFilePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UDBase_UserUDBase", Storage="_UserUDBases", ThisKey="UDBaseId", OtherKey="UDBaseId")]
		public EntitySet<UserUDBase> UserUDBases
		{
			get
			{
				return this._UserUDBases;
			}
			set
			{
				this._UserUDBases.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UDBase_FileDetail", Storage="_FileDetails", ThisKey="UDBaseId", OtherKey="UDBaseID")]
		public EntitySet<FileDetail> FileDetails
		{
			get
			{
				return this._FileDetails;
			}
			set
			{
				this._FileDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserUDBases(UserUDBase entity)
		{
			this.SendPropertyChanging();
			entity.UDBase = this;
		}
		
		private void detach_UserUDBases(UserUDBase entity)
		{
			this.SendPropertyChanging();
			entity.UDBase = null;
		}
		
		private void attach_FileDetails(FileDetail entity)
		{
			this.SendPropertyChanging();
			entity.UDBase = this;
		}
		
		private void detach_FileDetails(FileDetail entity)
		{
			this.SendPropertyChanging();
			entity.UDBase = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UDFiles")]
	public partial class UDFile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UDFileId;
		
		private string _Filename;
		
		private System.DateTime _Uploaded;
		
		private int _Uploader;
		
		private string _Uploadername;
		
		private int _UDBaseId;
		
		private string _Description;
		
		private int _Filesize;
		
		private string _FileType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUDFileIdChanging(int value);
    partial void OnUDFileIdChanged();
    partial void OnFilenameChanging(string value);
    partial void OnFilenameChanged();
    partial void OnUploadedChanging(System.DateTime value);
    partial void OnUploadedChanged();
    partial void OnUploaderChanging(int value);
    partial void OnUploaderChanged();
    partial void OnUploadernameChanging(string value);
    partial void OnUploadernameChanged();
    partial void OnUDBaseIdChanging(int value);
    partial void OnUDBaseIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnFilesizeChanging(int value);
    partial void OnFilesizeChanged();
    partial void OnFileTypeChanging(string value);
    partial void OnFileTypeChanged();
    #endregion
		
		public UDFile()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UDFileId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UDFileId
		{
			get
			{
				return this._UDFileId;
			}
			set
			{
				if ((this._UDFileId != value))
				{
					this.OnUDFileIdChanging(value);
					this.SendPropertyChanging();
					this._UDFileId = value;
					this.SendPropertyChanged("UDFileId");
					this.OnUDFileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filename", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Filename
		{
			get
			{
				return this._Filename;
			}
			set
			{
				if ((this._Filename != value))
				{
					this.OnFilenameChanging(value);
					this.SendPropertyChanging();
					this._Filename = value;
					this.SendPropertyChanged("Filename");
					this.OnFilenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uploaded", DbType="DateTime NOT NULL")]
		public System.DateTime Uploaded
		{
			get
			{
				return this._Uploaded;
			}
			set
			{
				if ((this._Uploaded != value))
				{
					this.OnUploadedChanging(value);
					this.SendPropertyChanging();
					this._Uploaded = value;
					this.SendPropertyChanged("Uploaded");
					this.OnUploadedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uploader", DbType="Int NOT NULL")]
		public int Uploader
		{
			get
			{
				return this._Uploader;
			}
			set
			{
				if ((this._Uploader != value))
				{
					this.OnUploaderChanging(value);
					this.SendPropertyChanging();
					this._Uploader = value;
					this.SendPropertyChanged("Uploader");
					this.OnUploaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uploadername", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Uploadername
		{
			get
			{
				return this._Uploadername;
			}
			set
			{
				if ((this._Uploadername != value))
				{
					this.OnUploadernameChanging(value);
					this.SendPropertyChanging();
					this._Uploadername = value;
					this.SendPropertyChanged("Uploadername");
					this.OnUploadernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UDBaseId", DbType="Int NOT NULL")]
		public int UDBaseId
		{
			get
			{
				return this._UDBaseId;
			}
			set
			{
				if ((this._UDBaseId != value))
				{
					this.OnUDBaseIdChanging(value);
					this.SendPropertyChanging();
					this._UDBaseId = value;
					this.SendPropertyChanged("UDBaseId");
					this.OnUDBaseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filesize", DbType="Int NOT NULL")]
		public int Filesize
		{
			get
			{
				return this._Filesize;
			}
			set
			{
				if ((this._Filesize != value))
				{
					this.OnFilesizeChanging(value);
					this.SendPropertyChanging();
					this._Filesize = value;
					this.SendPropertyChanged("Filesize");
					this.OnFilesizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileType", DbType="NVarChar(50)")]
		public string FileType
		{
			get
			{
				return this._FileType;
			}
			set
			{
				if ((this._FileType != value))
				{
					this.OnFileTypeChanging(value);
					this.SendPropertyChanging();
					this._FileType = value;
					this.SendPropertyChanged("FileType");
					this.OnFileTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserDefinedFields")]
	public partial class UserDefinedField : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserDefinedFieldId;
		
		private int _UserId;
		
		private string _Key;
		
		private string _FieldValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserDefinedFieldIdChanging(int value);
    partial void OnUserDefinedFieldIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnFieldValueChanging(string value);
    partial void OnFieldValueChanged();
    #endregion
		
		public UserDefinedField()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserDefinedFieldId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserDefinedFieldId
		{
			get
			{
				return this._UserDefinedFieldId;
			}
			set
			{
				if ((this._UserDefinedFieldId != value))
				{
					this.OnUserDefinedFieldIdChanging(value);
					this.SendPropertyChanging();
					this._UserDefinedFieldId = value;
					this.SendPropertyChanged("UserDefinedFieldId");
					this.OnUserDefinedFieldIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Key]", Storage="_Key", DbType="NVarChar(4000)")]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldValue", DbType="NVarChar(4000)")]
		public string FieldValue
		{
			get
			{
				return this._FieldValue;
			}
			set
			{
				if ((this._FieldValue != value))
				{
					this.OnFieldValueChanging(value);
					this.SendPropertyChanging();
					this._FieldValue = value;
					this.SendPropertyChanged("FieldValue");
					this.OnFieldValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserMessageBases")]
	public partial class UserMessageBase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserMessageBaseId;
		
		private int _UserId;
		
		private int _MessageBaseId;
		
		private int _HighestMessageRead;
		
		private EntityRef<MessageBase> _MessageBase;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserMessageBaseIdChanging(int value);
    partial void OnUserMessageBaseIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnMessageBaseIdChanging(int value);
    partial void OnMessageBaseIdChanged();
    partial void OnHighestMessageReadChanging(int value);
    partial void OnHighestMessageReadChanged();
    #endregion
		
		public UserMessageBase()
		{
			this._MessageBase = default(EntityRef<MessageBase>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserMessageBaseId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserMessageBaseId
		{
			get
			{
				return this._UserMessageBaseId;
			}
			set
			{
				if ((this._UserMessageBaseId != value))
				{
					this.OnUserMessageBaseIdChanging(value);
					this.SendPropertyChanging();
					this._UserMessageBaseId = value;
					this.SendPropertyChanged("UserMessageBaseId");
					this.OnUserMessageBaseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageBaseId", DbType="Int NOT NULL")]
		public int MessageBaseId
		{
			get
			{
				return this._MessageBaseId;
			}
			set
			{
				if ((this._MessageBaseId != value))
				{
					if (this._MessageBase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessageBaseIdChanging(value);
					this.SendPropertyChanging();
					this._MessageBaseId = value;
					this.SendPropertyChanged("MessageBaseId");
					this.OnMessageBaseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HighestMessageRead", DbType="Int NOT NULL")]
		public int HighestMessageRead
		{
			get
			{
				return this._HighestMessageRead;
			}
			set
			{
				if ((this._HighestMessageRead != value))
				{
					this.OnHighestMessageReadChanging(value);
					this.SendPropertyChanging();
					this._HighestMessageRead = value;
					this.SendPropertyChanged("HighestMessageRead");
					this.OnHighestMessageReadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MessageBase_UserMessageBase", Storage="_MessageBase", ThisKey="MessageBaseId", OtherKey="MessageBaseId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MessageBase MessageBase
		{
			get
			{
				return this._MessageBase.Entity;
			}
			set
			{
				MessageBase previousValue = this._MessageBase.Entity;
				if (((previousValue != value) 
							|| (this._MessageBase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MessageBase.Entity = null;
						previousValue.UserMessageBases.Remove(this);
					}
					this._MessageBase.Entity = value;
					if ((value != null))
					{
						value.UserMessageBases.Add(this);
						this._MessageBaseId = value.MessageBaseId;
					}
					else
					{
						this._MessageBaseId = default(int);
					}
					this.SendPropertyChanged("MessageBase");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserMessageBase", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserMessageBases.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserMessageBases.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserReads")]
	public partial class UserRead : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserReadId;
		
		private int _UserId;
		
		private int _MessageHeaderId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserReadIdChanging(int value);
    partial void OnUserReadIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnMessageHeaderIdChanging(int value);
    partial void OnMessageHeaderIdChanged();
    #endregion
		
		public UserRead()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserReadId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserReadId
		{
			get
			{
				return this._UserReadId;
			}
			set
			{
				if ((this._UserReadId != value))
				{
					this.OnUserReadIdChanging(value);
					this.SendPropertyChanging();
					this._UserReadId = value;
					this.SendPropertyChanged("UserReadId");
					this.OnUserReadIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageHeaderId", DbType="Int NOT NULL")]
		public int MessageHeaderId
		{
			get
			{
				return this._MessageHeaderId;
			}
			set
			{
				if ((this._MessageHeaderId != value))
				{
					this.OnMessageHeaderIdChanging(value);
					this.SendPropertyChanging();
					this._MessageHeaderId = value;
					this.SendPropertyChanged("MessageHeaderId");
					this.OnMessageHeaderIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _Username;
		
		private string _HashedPassword;
		
		private System.DateTime _LastConnection;
		
		private System.DateTime _LastDisconnection;
		
		private string _LastConnectionIP;
		
		private int _AccessLevel;
		
		private string _RealName;
		
		private string _ComputerType;
		
		private string _Email;
		
		private EntitySet<UserUDBase> _UserUDBases;
		
		private EntitySet<FileDetail> _FileDetails;
		
		private EntitySet<MessageHeader> _MessageHeaders;
		
		private EntitySet<UserMessageBase> _UserMessageBases;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnHashedPasswordChanging(string value);
    partial void OnHashedPasswordChanged();
    partial void OnLastConnectionChanging(System.DateTime value);
    partial void OnLastConnectionChanged();
    partial void OnLastDisconnectionChanging(System.DateTime value);
    partial void OnLastDisconnectionChanged();
    partial void OnLastConnectionIPChanging(string value);
    partial void OnLastConnectionIPChanged();
    partial void OnAccessLevelChanging(int value);
    partial void OnAccessLevelChanged();
    partial void OnRealNameChanging(string value);
    partial void OnRealNameChanged();
    partial void OnComputerTypeChanging(string value);
    partial void OnComputerTypeChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public User()
		{
			this._UserUDBases = new EntitySet<UserUDBase>(new Action<UserUDBase>(this.attach_UserUDBases), new Action<UserUDBase>(this.detach_UserUDBases));
			this._FileDetails = new EntitySet<FileDetail>(new Action<FileDetail>(this.attach_FileDetails), new Action<FileDetail>(this.detach_FileDetails));
			this._MessageHeaders = new EntitySet<MessageHeader>(new Action<MessageHeader>(this.attach_MessageHeaders), new Action<MessageHeader>(this.detach_MessageHeaders));
			this._UserMessageBases = new EntitySet<UserMessageBase>(new Action<UserMessageBase>(this.attach_UserMessageBases), new Action<UserMessageBase>(this.detach_UserMessageBases));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(255)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HashedPassword", DbType="NVarChar(255)")]
		public string HashedPassword
		{
			get
			{
				return this._HashedPassword;
			}
			set
			{
				if ((this._HashedPassword != value))
				{
					this.OnHashedPasswordChanging(value);
					this.SendPropertyChanging();
					this._HashedPassword = value;
					this.SendPropertyChanged("HashedPassword");
					this.OnHashedPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastConnection", DbType="DateTime NOT NULL")]
		public System.DateTime LastConnection
		{
			get
			{
				return this._LastConnection;
			}
			set
			{
				if ((this._LastConnection != value))
				{
					this.OnLastConnectionChanging(value);
					this.SendPropertyChanging();
					this._LastConnection = value;
					this.SendPropertyChanged("LastConnection");
					this.OnLastConnectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastDisconnection", DbType="DateTime NOT NULL")]
		public System.DateTime LastDisconnection
		{
			get
			{
				return this._LastDisconnection;
			}
			set
			{
				if ((this._LastDisconnection != value))
				{
					this.OnLastDisconnectionChanging(value);
					this.SendPropertyChanging();
					this._LastDisconnection = value;
					this.SendPropertyChanged("LastDisconnection");
					this.OnLastDisconnectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastConnectionIP", DbType="NVarChar(255)")]
		public string LastConnectionIP
		{
			get
			{
				return this._LastConnectionIP;
			}
			set
			{
				if ((this._LastConnectionIP != value))
				{
					this.OnLastConnectionIPChanging(value);
					this.SendPropertyChanging();
					this._LastConnectionIP = value;
					this.SendPropertyChanged("LastConnectionIP");
					this.OnLastConnectionIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessLevel", DbType="Int NOT NULL")]
		public int AccessLevel
		{
			get
			{
				return this._AccessLevel;
			}
			set
			{
				if ((this._AccessLevel != value))
				{
					this.OnAccessLevelChanging(value);
					this.SendPropertyChanging();
					this._AccessLevel = value;
					this.SendPropertyChanged("AccessLevel");
					this.OnAccessLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealName", DbType="NVarChar(255)")]
		public string RealName
		{
			get
			{
				return this._RealName;
			}
			set
			{
				if ((this._RealName != value))
				{
					this.OnRealNameChanging(value);
					this.SendPropertyChanging();
					this._RealName = value;
					this.SendPropertyChanged("RealName");
					this.OnRealNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComputerType", DbType="NVarChar(255)")]
		public string ComputerType
		{
			get
			{
				return this._ComputerType;
			}
			set
			{
				if ((this._ComputerType != value))
				{
					this.OnComputerTypeChanging(value);
					this.SendPropertyChanging();
					this._ComputerType = value;
					this.SendPropertyChanged("ComputerType");
					this.OnComputerTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(255)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserUDBase", Storage="_UserUDBases", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<UserUDBase> UserUDBases
		{
			get
			{
				return this._UserUDBases;
			}
			set
			{
				this._UserUDBases.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_FileDetail", Storage="_FileDetails", ThisKey="UserId", OtherKey="UploaderID")]
		public EntitySet<FileDetail> FileDetails
		{
			get
			{
				return this._FileDetails;
			}
			set
			{
				this._FileDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MessageHeader", Storage="_MessageHeaders", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<MessageHeader> MessageHeaders
		{
			get
			{
				return this._MessageHeaders;
			}
			set
			{
				this._MessageHeaders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserMessageBase", Storage="_UserMessageBases", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<UserMessageBase> UserMessageBases
		{
			get
			{
				return this._UserMessageBases;
			}
			set
			{
				this._UserMessageBases.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserUDBases(UserUDBase entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserUDBases(UserUDBase entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_FileDetails(FileDetail entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_FileDetails(FileDetail entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_MessageHeaders(MessageHeader entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_MessageHeaders(MessageHeader entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserMessageBases(UserMessageBase entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserMessageBases(UserMessageBase entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
